/**
 * County RP API
 * API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Faction } from '../model/faction';
import { FactionMember } from '../model/factionMember';
import { MemberRankUpdate } from '../model/memberRankUpdate';
import { MessageResponse } from '../model/messageResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FactionApiService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Kick a faction member by character ID
     * 
     * @param characterId ID of the character to kick
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public kickFactionMember(characterId: number, observe?: 'body', reportProgress?: boolean): Observable<MessageResponse>;
    public kickFactionMember(characterId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MessageResponse>>;
    public kickFactionMember(characterId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MessageResponse>>;
    public kickFactionMember(characterId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling kickFactionMember.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MessageResponse>('post',`${this.basePath}/faction/${encodeURIComponent(String(characterId))}/kick`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List a faction members by faction ID
     * 
     * @param id ID of the faction to list members
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFactionMembers(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<FactionMember>>;
    public listFactionMembers(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FactionMember>>>;
    public listFactionMembers(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FactionMember>>>;
    public listFactionMembers(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listFactionMembers.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<FactionMember>>('get',`${this.basePath}/faction/${encodeURIComponent(String(id))}/members`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a faction member rank by character ID
     * 
     * @param characterId ID of the character to update rank
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchFactionMemberRank(characterId: number, body?: MemberRankUpdate, observe?: 'body', reportProgress?: boolean): Observable<FactionMember>;
    public patchFactionMemberRank(characterId: number, body?: MemberRankUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FactionMember>>;
    public patchFactionMemberRank(characterId: number, body?: MemberRankUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FactionMember>>;
    public patchFactionMemberRank(characterId: number, body?: MemberRankUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling patchFactionMemberRank.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FactionMember>('post',`${this.basePath}/faction/${encodeURIComponent(String(characterId))}/rank`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a faction by ID
     * 
     * @param factionId ID of the faction to retrieve
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveFaction(factionId: number, observe?: 'body', reportProgress?: boolean): Observable<Faction>;
    public retrieveFaction(factionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Faction>>;
    public retrieveFaction(factionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Faction>>;
    public retrieveFaction(factionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (factionId === null || factionId === undefined) {
            throw new Error('Required parameter factionId was null or undefined when calling retrieveFaction.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Faction>('get',`${this.basePath}/faction/${encodeURIComponent(String(factionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
